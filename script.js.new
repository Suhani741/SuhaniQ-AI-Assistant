// DOM Elements
const btn = document.querySelector("#btn");
const content = document.querySelector("#content");
const voice = document.querySelector("#voice");
const responseText = document.querySelector("#response-text");
const statusText = document.querySelector("#status");
const loadingOverlay = document.querySelector("#loading");

// Initialize the application
function initApp() {
    // Set initial status
    const statusElement = document.getElementById('status');
    if (statusElement) {
        statusElement.textContent = 'Ready to listen...';
    }
    
    // Hide loading overlay if it's visible
    hideLoading();
}

// Speech synthesis function
function speak(text) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.rate = 1;
    utterance.pitch = 1;
    utterance.volume = 1;
    utterance.lang = 'en-US';
    
    utterance.onstart = () => {
        btn.classList.add('speaking');
    };
    
    utterance.onend = () => {
        btn.classList.remove('speaking');
    };
    
    window.speechSynthesis.speak(utterance);
}

// Update response in the UI
function updateResponse(text) {
    if (responseText) {
        responseText.textContent = text;
    }
}

// Show loading state
function showLoading() {
    if (loadingOverlay) {
        loadingOverlay.style.display = 'flex';
    }
}

// Hide loading state
function hideLoading() {
    if (loadingOverlay) {
        loadingOverlay.style.display = 'none';
    }
}

// Main command processing function
async function takeCommand(message) {
    console.log('Processing command:', message);
    showLoading();
    
    try {
        // Process commands
        if (message.toLowerCase().includes('open ')) {
            const website = message.toLowerCase().split('open ')[1];
            let url;
            
            // Map common website names to their URLs
            const websites = {
                'youtube': 'https://youtube.com',
                'facebook': 'https://facebook.com',
                'instagram': 'https://instagram.com',
                'twitter': 'https://twitter.com',
                'google': 'https://google.com',
                'gmail': 'https://gmail.com',
                'github': 'https://github.com',
                'linkedin': 'https://linkedin.com',
                'netflix': 'https://netflix.com',
                'amazon': 'https://amazon.com',
                'wikipedia': 'https://wikipedia.org'
            };
            
            // Check if the requested website is in our mapping
            if (websites[website]) {
                url = websites[website];
                window.open(url, '_blank');
                updateResponse(`Opening ${website}...`);
                speak(`Opening ${website}`);
            } else if (website.startsWith('http') || 
                     website.includes('.com') || 
                     website.includes('.in') || 
                     website.includes('.org') || 
                     website.includes('.net') || 
                     website.includes('.io')) {
                // Try to open the URL directly if it looks like a URL
                url = website.startsWith('http') ? website : `https://${website}`;
                window.open(url, '_blank');
                updateResponse(`Opening ${url}...`);
                speak(`Opening ${url}`);
            } else {
                updateResponse(`I'm sorry, I don't know how to open ${website}.`);
                speak(`I'm sorry, I don't know how to open ${website}.`);
            }
        } else {
            // For all other commands, just acknowledge
            updateResponse("I'm sorry, this feature is not available right now.");
            speak("I'm sorry, this feature is not available right now.");
        }
    } catch (error) {
        console.error('Error processing command:', error);
        updateResponse("Sorry, I encountered an error processing your request.");
        speak("Sorry, I encountered an error processing your request.");
    } finally {
        hideLoading();
    }
}

// Speech recognition setup
let speechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
let recognition = new speechRecognition();
recognition.continuous = false;
recognition.interimResults = false;
recognition.maxAlternatives = 1;

// Event handlers for speech recognition
recognition.onstart = () => {
    console.log('Voice recognition started');
    statusText.textContent = 'Listening...';
    btn.classList.add('listening');
};

recognition.onend = () => {
    console.log('Voice recognition ended');
    statusText.textContent = 'Processing...';
    btn.classList.remove('listening');
};

recognition.onerror = (event) => {
    console.error('Speech recognition error:', event.error);
    statusText.textContent = 'Error: ' + event.error;
    btn.classList.remove('listening');
    hideLoading();
};

recognition.onresult = (event) => {
    const currentIndex = event.resultIndex;
    const transcript = event.results[currentIndex][0].transcript;
    content.textContent = transcript;
    takeCommand(transcript);
};

// Button click event
btn.addEventListener('click', () => {
    if (btn.classList.contains('listening')) {
        recognition.stop();
    } else {
        recognition.start();
        content.textContent = 'Listening...';
    }
});

// Initialize the app when the page loads
window.addEventListener('load', initApp);
